name: "üöÄ Release Management"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0 or v1.0.0 - will be normalized to v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Normalize version format
        id: normalize_version
        run: |
          # Get the input version
          INPUT_VERSION="${{ github.event.inputs.version }}"
          
          # Remove any existing 'v' prefix and add a new one
          # This ensures format is always vx.y.z
          CLEAN_VERSION=$(echo "$INPUT_VERSION" | sed 's/^v//')
          NORMALIZED_VERSION="v$CLEAN_VERSION"
          
          # Validate version format (x.y.z)
          if ! echo "$CLEAN_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "‚ùå Error: Version must be in format x.y.z (e.g., 1.0.0)"
            echo "Received: $INPUT_VERSION"
            exit 1
          fi
          
          echo "Original version: $INPUT_VERSION"
          echo "Normalized version: $NORMALIZED_VERSION"
          echo "normalized_version=$NORMALIZED_VERSION" >> $GITHUB_OUTPUT
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: 'main',
              head: 'HEAD'
            });
            
            const conventionalCommits = commits.commits
              .filter(commit => !commit.commit.message.includes('Merge'))
              .map(commit => {
                const message = commit.commit.message.split('\n')[0];
                const sha = commit.sha.substring(0, 7);
                return `- ${message} (${sha})`;
              })
              .join('\n');
            
            return conventionalCommits;

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.normalize_version.outputs.normalized_version }}
          name: Release ${{ steps.normalize_version.outputs.normalized_version }}
          body: |
            ## üöÄ Release ${{ steps.normalize_version.outputs.normalized_version }}
            
            ### What's Changed
            
            ${{ steps.changelog.outputs.result }}
            
            ### üê≥ Docker Images
            
            - **TLDraw**: `ghcr.io/${{ github.repository }}/tldraw:${{ steps.normalize_version.outputs.normalized_version }}`
            - **Engine**: `ghcr.io/${{ github.repository }}/engine:${{ steps.normalize_version.outputs.normalized_version }}`
            
            ### üöÄ Quick Start
            
            ```bash
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git
            cd diagram-tools-hub
            
            # Checkout this release
            git checkout ${{ steps.normalize_version.outputs.normalized_version }}
            
            # Start all services
            ./manage-config.sh start
            
            # Access the hub at http://localhost:8080
            ```
            
            ### üìã Features
            
            - üé® **Draw.io** - Professional diagramming platform
            - ‚úèÔ∏è **Excalidraw** - Virtual whiteboard for sketching
            - üé® **TLDraw** - Modern collaborative drawing canvas
            - üîß **Easy Management** - Simple scripts for container management
            
            ### üõ†Ô∏è System Requirements
            
            - Docker and Docker Compose
            - 4GB RAM minimum
            - 2GB disk space
            
            ### üìù Changelog
            
            See the [full changelog](https://github.com/${{ github.repository }}/commits/${{ steps.normalize_version.outputs.normalized_version }}) for detailed changes.
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Update version in files
        run: |
          # Update version in README or other files if needed
          echo "Version ${{ steps.normalize_version.outputs.normalized_version }} released successfully!"
          echo "Release URL: ${{ steps.create_release.outputs.upload_url }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ steps.normalize_version.outputs.normalized_version }}
            type=raw,value=latest

      - name: Build and push TLDraw image
        uses: docker/build-push-action@v5
        with:
          context: ./tldraw
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Engine image
        uses: docker/build-push-action@v5
        with:
          context: ./engine
          file: ./engine/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update release notes with Docker images
        uses: actions/github-script@v7
        with:
          script: |
            // Get the release that was just created
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const release = releases[0]; // Get the latest release
            const version = release.tag_name;
            const body = release.body || '';
            
            const dockerImages = '\n\n### üê≥ Docker Images\n\n' +
              '- **TLDraw**: `ghcr.io/${{ github.repository }}/tldraw:' + version + '`\n' +
              '- **Engine**: `ghcr.io/${{ github.repository }}/engine:' + version + '`\n' +
              '- **Latest**: `ghcr.io/${{ github.repository }}/tldraw:latest`\n\n' +
              '### üöÄ Quick Start with Docker\n\n' +
              '```bash\n' +
              '# Pull the latest images\n' +
              'docker pull ghcr.io/${{ github.repository }}/tldraw:' + version + '\n' +
              'docker pull ghcr.io/${{ github.repository }}/engine:' + version + '\n\n' +
              '# Or use docker-compose with specific version\n' +
              'git clone https://github.com/${{ github.repository }}.git\n' +
              'cd diagram-tools-hub\n' +
              'git checkout ' + version + '\n' +
              './manage-config.sh start\n' +
              '```\n';
            
            const updatedBody = body + dockerImages;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: updatedBody
            });

      - name: Notify success
        if: success()
        run: |
          echo "üéâ Release ${{ steps.normalize_version.outputs.normalized_version }} created successfully!"
          echo "üì¶ Docker images built and pushed: ${{ steps.meta.outputs.tags }}"
          echo "üîó Release URL: ${{ steps.create_release.outputs.html_url }}" 