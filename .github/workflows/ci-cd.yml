name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and test TLDraw
        run: |
          cd ./tldraw
          docker build -t tldraw:test .
          echo "✅ TLDraw image built successfully"

      - name: Build and test Engine (Frontend)
        run: |
          cd ./engine
          docker build -t engine:test .
          echo "✅ Engine image built successfully"

      - name: Test Docker Compose
        run: |
          docker compose config
          echo "✅ Docker Compose configuration is valid"

      - name: Test container startup
        run: |
          echo "🧪 Testing container startup..."
          
          # Test TLDraw container startup
          echo "Testing TLDraw container..."
          docker run --rm -d --name tldraw-test tldraw:test
          sleep 5
          if ! docker ps | grep -q tldraw-test; then
            echo "❌ TLDraw container failed to start"
            docker logs tldraw-test 2>/dev/null || echo "No logs available"
            exit 1
          fi
          docker stop tldraw-test
          echo "✅ TLDraw container started successfully"
          
          # Test Engine container startup
          echo "Testing Engine container..."
          docker run --rm -d --name engine-test -p 8080:80 engine:test
          sleep 5
          if ! docker ps | grep -q engine-test; then
            echo "❌ Engine container failed to start"
            echo "Container logs:"
            docker logs engine-test 2>/dev/null || echo "No logs available"
            echo "Container inspect:"
            docker inspect engine-test 2>/dev/null || echo "Container not found"
            exit 1
          fi
          
          # Test if nginx is responding
          echo "Testing Engine container health..."
          sleep 2
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "✅ Engine container health check passed"
          else
            echo "⚠️ Engine container started but health check failed"
            echo "Container logs:"
            docker logs engine-test
          fi
          
          docker stop engine-test
          echo "✅ Engine container started successfully"
          
          echo "✅ All containers started successfully"





 