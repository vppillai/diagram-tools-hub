name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and test TLDraw
        uses: docker/build-push-action@v5
        with:
          context: ./tldraw
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/tldraw:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose
        run: |
          docker compose config
          echo "âœ… Docker Compose configuration is valid"

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy Scan'

  # Build and push Docker images
  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push TLDraw image
        uses: docker/build-push-action@v5
        with:
          context: ./tldraw
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Engine image
        uses: docker/build-push-action@v5
        with:
          context: ./engine
          file: ./engine/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/engine:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create release
  create-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate release notes
        id: release_notes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.release.tag_name.replace('v', ''),
              head: 'main'
            });
            
            const notes = commits.commits.map(commit => 
              `- ${commit.commit.message} (${commit.sha.substring(0, 7)})`
            ).join('\n');
            
            return notes;

      - name: Update release notes
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: `## What's Changed\n\n${{ steps.release_notes.outputs.result }}\n\n## Docker Images\n\n- TLDraw: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/tldraw:${{ github.event.release.tag_name }}\`\n- Engine: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/engine:${{ github.event.release.tag_name }}\`\n\n## Quick Start\n\n\`\`\`bash\n# Clone the repository\ngit clone https://github.com/${{ github.repository }}.git\ncd diagram-tools-hub\n\n# Start all services\n./manage-config.sh start\n\n# Access the hub at http://localhost:8080\n\`\`\``
            });

  # Deploy to staging (optional)
  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          echo "This would typically involve deploying to a staging server"
          echo "You can customize this step based on your deployment needs"

  # Deploy to production (optional)
  deploy-production:
    needs: create-release
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          echo "This would typically involve deploying to your production server"
          echo "You can customize this step based on your deployment needs" 