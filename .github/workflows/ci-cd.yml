name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and test TLDraw
        run: |
          cd ./tldraw
          docker build -t tldraw:test .
          echo "‚úÖ TLDraw image built successfully"

      - name: Build and test Engine (Frontend)
        run: |
          # Generate nginx.conf using manage script before building
          chmod +x ./manage-config.sh
          ./manage-config.sh http-only  # This generates the nginx.conf file
          
          cd ./engine
          docker build -t engine:test .
          echo "‚úÖ Engine image built successfully"

      - name: Test Docker Compose
        run: |
          docker compose config
          echo "‚úÖ Docker Compose configuration is valid"

      - name: Test full system startup with manage script
        run: |
          echo "üß™ Testing full system startup with manage script..."
          
          # Test individual container builds first
          echo "Testing TLDraw container..."
          docker run --rm -d --name tldraw-test tldraw:test
          sleep 5
          if ! docker ps | grep -q tldraw-test; then
            echo "‚ùå TLDraw container failed to start"
            docker logs tldraw-test 2>/dev/null || echo "No logs available"
            exit 1
          fi
          docker stop tldraw-test
          echo "‚úÖ TLDraw container started successfully"
          
          # Test using the manage script (HTTP-only mode for CI)
          echo "Testing full system with manage script..."
          chmod +x ./manage-config.sh
          
          # Use HTTP-only mode to avoid SSL certificate issues in CI
          ./manage-config.sh http-only
          ./manage-config.sh start
          
          # Wait for services to start
          sleep 15
          
          # Test if the system is responding
          echo "Testing system health..."
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "‚úÖ System health check passed"
          else
            echo "‚ö†Ô∏è System health check failed"
            echo "Service logs (last 50 lines):"
            docker compose logs --tail=50
          fi
          
          # Check container status
          echo "Checking container status..."
          ./manage-config.sh status
          
          # Stop services
          ./manage-config.sh stop
          
          echo "‚úÖ Full system test completed"

  # Test rebuild commands
  test-rebuild-commands:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test rebuild commands
        run: |
          echo "üß™ Testing rebuild and rebuild-dev commands..."
          
          chmod +x ./manage-config.sh
          
          # Use HTTP-only mode to avoid SSL certificate issues in CI
          ./manage-config.sh http-only
          
          echo "Testing production rebuild command..."
          ./manage-config.sh rebuild tldraw
          
          # Verify TLDraw container is running
          if docker ps | grep -q tldraw-app; then
            echo "‚úÖ Production rebuild successful - TLDraw container running"
          else
            echo "‚ùå Production rebuild failed - TLDraw container not running"
            docker compose logs tldraw
            exit 1
          fi
          
          echo "Testing development rebuild command..."
          ./manage-config.sh rebuild-dev tldraw
          
          # Verify TLDraw container is running in dev mode
          if docker ps | grep -q tldraw-app; then
            echo "‚úÖ Development rebuild successful - TLDraw container running"
          else
            echo "‚ùå Development rebuild failed - TLDraw container not running"
            docker compose logs tldraw
            exit 1
          fi
          
          # Test system health after both rebuilds
          sleep 10
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "‚úÖ System health check passed after rebuilds"
          else
            echo "‚ö†Ô∏è System health check failed after rebuilds"
            echo "Service logs:"
            docker compose logs --tail=30
          fi
          
          # Test full system rebuild (production)
          echo "Testing full system rebuild (production)..."
          ./manage-config.sh rebuild
          sleep 15
          
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "‚úÖ Full production rebuild successful"
          else
            echo "‚ùå Full production rebuild failed"
            docker compose logs --tail=30
            exit 1
          fi
          
          # Test full system rebuild (development)
          echo "Testing full system rebuild (development)..."
          ./manage-config.sh rebuild-dev
          sleep 15
          
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "‚úÖ Full development rebuild successful"
          else
            echo "‚ùå Full development rebuild failed"
            docker compose logs --tail=30
            exit 1
          fi
          
          # Stop services
          ./manage-config.sh stop
          
          echo "‚úÖ All rebuild commands tested successfully"





 